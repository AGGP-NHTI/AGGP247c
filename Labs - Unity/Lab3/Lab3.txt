AGGP 247
Lab 3

Part 1: Building More Tools
* Upgrade the drawing methods in Grid2D to take a boolean to indicate to draw in the grid space. 
This boolean will be optional and will default to value of true. 
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments

Here is what your method signatures will look like after you are done: 
** public Vector2 Grid2ScreenPoint(Vector2,bool [= true]) 	


* Add the following methods to Grid2D

        public void DrawLine(SpriteBatch sb, Line line, Vector2? location = null, bool DrawinGridScale = true)
        {
            Vector2 drawlocation = Vector2.Zero; 
            if (location != null) { drawlocation = location.Value; }

            LineDrawer.DrawLine(sb, line.width, line.color, Grid2ScreenPoint(drawlocation + line.startPoint, DrawinGridScale), Grid2ScreenPoint(drawlocation + line.endPoint, DrawinGridScale)); 
        }

        public void DrawLineObject(SpriteBatch sb, LineObject lineObj, bool DrawinGridScale = true)
        {
            foreach (Line line in lineObj.Lines)
            {
               DrawLine(sb, line, lineObj.Location, DrawinGridScale);
            }
        }


public float ScaleGrid2Screen(float value)
{
   return (value * GridSize);
}

public float ScaleScreen2Grid(float value)
{
   return (value / GridSize);
}


* Add the following method to DrawingTools

** public static void DrawPoint(SpriteBatch spriteBatch, float width, Color color, Vector2 location)
Use your draw circle method to draw the point. 
use the width/2 for the circle's width and radius. 
use the width*2 for the number of sides 

Note: This method of drawing a point is a hack and has issues. 
You'll get a better drawing method in a future lab. 


** public static float V2ToAngle(Vector2 startPoint, Vector2 endPoint)
Use Atan2 to convert
don't forget to convert from radians

** public static Vector2 RotatePoint(Vector2 Center, float angle, Vector2 pointIN)
===============
 xnew = point.X * cos(angle) - point.Y * sin(angle);
 ynew = point.X * sin(angle) + point.Y * cos(angle);

If you need a review on rotating a point. 
https://www.khanacademy.org/partner-content/pixar/sets/rotation/a/rotation-lesson-brief
===============

Part 2: Putting it work 

* Hexagon
	Use the Your Circle Drawing method to create a circle with 6 sizes. 
	Place a draw a point at each of the start of each side. 
	Draw this Object and the points relative to the Grid space

* Rotating Dot
	Rotate a dot around the origin of the grid
	The size is 2 Grid units wide
	Will be 7.5 units from the origin
	Will rotate once every 5 seconds. 
	
* Line Object on the Grid
	A folder of different Line Objects has been provided to you
	Draw one of these objects using the draw method for a line object in your Grid2D class. 

* Parabolas
	Draw the following Parabolas on the grid. 
	y = x^2 
	y = x^2 + 2x+ 1
	y = -2x^2 + 10x + 12
	x = -y^3
	
	Hint: create line objects at runtime for them

===============
Two forms of the Parabola, solved for Y
y = ax2+ bx + c 
y = a(x – h)² + k

you can transpose X with Y to get a parabola that graphs vertically
===============



